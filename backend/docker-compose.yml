version: '3.9'

services:
  zero:
    image: dgraph/dgraph:v21.12.0
    container_name: zero
    working_dir: /data/zero
    ports:
      # - '5080:5080'
      - '6080:6080'
    labels:
      cluster: test
      service: zero
    environment:
      DGRAPH_ZERO_MY: zero:5080
    volumes:
      - dgraph:/dgraph:rw
    restart: on-failure
    command: dgraph zero
    healthcheck:
      test: curl http://zero:6080/state || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 15s

  alpha:
    image: dgraph/dgraph:v21.12.0
    working_dir: /data/alpha
    container_name: alpha
    depends_on:
      zero:
        condition: service_healthy
    ports:
      # - '7080:7080'
      - '8080:8080'
      # - '9080:9080'
    labels:
      cluster: test
      service: alpha
    environment:
      DGRAPH_ALPHA_ZERO: zero:5080
      DGRAPH_ALPHA_MY: alpha:7080
      DGRAPH_ALPHA_SECURITY: "whitelist=0.0.0.0/0"
      DGRAPH_ALPHA_LAMBDA: "url=http://lambda:8686/graphql-worker"
    volumes:
      - dgraph:/dgraph:rw
    restart: on-failure
    command: dgraph alpha
    healthcheck:
      test: curl http://alpha:8080/health || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 15s

  lambda:
    image: dgraph/dgraph-lambda:1.4.0
    container_name: lambda
    depends_on:
      alpha:
        condition: service_healthy
    ports:
      - '8686:8686'
    labels:
      cluster: test
      service: lambda
    environment:
      DGRAPH_URL: http://alpha:8080 # dgraph alpha endpoint
    volumes:
      - ./dist:/app/script:ro
    restart: on-failure

volumes:
  dgraph: {}
  script: {}
