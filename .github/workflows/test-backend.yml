# Simple workflow for deploying to local DGraph
name: Test Schema and Lambda in local DGraph

on:
  # Runs on pushes targeting the default branch
  push:
    branches:
      - '*'
    paths:
      - .github/workflows/*-backend.yml
      - backend/**
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        working-directory: ./backend
    environment:
      name: build-backend
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Start local DGraph
        run: docker compose up --wait --build
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            .dgraph/cache
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}-
      - name: Install dependencies
        run: yarn install
      - name: Deploy to local Dgraph
        env:
          AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
          AUTH0_PUBLIC_KEY: ${{ secrets.AUTH0_PUBLIC_KEY }}
        run: sudo -E yarn run build # Todo: Avoid using `sudo`.
      # Todo: Run test queries
      - name: Stop local DGraph
        if: always()
        run: docker compose down
